{"ast":null,"code":"var _jsxFileName = \"C:\\\\next.js\\\\qilin-react-dev-challenge\\\\src\\\\component\\\\HOC\\\\Logger.js\";\nimport React, { useEffect } from 'react';\n//   this is my logger component that is a high order component\n//   taking a compoentn as a parameter\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Logger = WrappedComponent => {\n  var _s = $RefreshSig$();\n  const WithLogging = props => {\n    _s();\n    // in the functional compoennt we use the useeffect hooks\n    // for lifecycle method at first render the the component is Mounted\n    // on return the component is unmounted and \n    // after another render if useffect showing the updating\n    // phase of the compoennt lifecycle\n    useEffect(() => {\n      console.log(`Component ${WrappedComponent.name} mounted`);\n      return () => {\n        console.log(`Component ${WrappedComponent.name} will unmount`);\n      };\n    }, []);\n    useEffect(() => {\n      console.log(`Component ${WrappedComponent.name} updated`);\n    });\n    return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  };\n  _s(WithLogging, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n  return WithLogging;\n};\n_c = Logger;\nexport default Logger;\nvar _c;\n$RefreshReg$(_c, \"Logger\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Logger","WrappedComponent","_s","$RefreshSig$","WithLogging","props","console","log","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/next.js/qilin-react-dev-challenge/src/component/HOC/Logger.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n//   this is my logger component that is a high order component\r\n//   taking a compoentn as a parameter\r\nconst Logger = WrappedComponent => {\r\n  const WithLogging = props => {\r\n\r\n    // in the functional compoennt we use the useeffect hooks\r\n    // for lifecycle method at first render the the component is Mounted\r\n    // on return the component is unmounted and \r\n    // after another render if useffect showing the updating\r\n    // phase of the compoennt lifecycle\r\n    useEffect(() => {\r\n      console.log(`Component ${WrappedComponent.name} mounted`);\r\n\r\n      return () => {\r\n        console.log(`Component ${WrappedComponent.name} will unmount`);\r\n      };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      console.log(`Component ${WrappedComponent.name} updated`);\r\n    });\r\n\r\n    return <WrappedComponent {...props} />;\r\n  };\r\n\r\n  return WithLogging;\r\n};\r\n\r\nexport default Logger;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGC,gBAAgB,IAAI;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACjC,MAAMC,WAAW,GAAGC,KAAK,IAAI;IAAAH,EAAA;IAE3B;IACA;IACA;IACA;IACA;IACAL,SAAS,CAAC,MAAM;MACdS,OAAO,CAACC,GAAG,CAAE,aAAYN,gBAAgB,CAACO,IAAK,UAAS,CAAC;MAEzD,OAAO,MAAM;QACXF,OAAO,CAACC,GAAG,CAAE,aAAYN,gBAAgB,CAACO,IAAK,eAAc,CAAC;MAChE,CAAC;IACH,CAAC,EAAE,EAAE,CAAC;IAENX,SAAS,CAAC,MAAM;MACdS,OAAO,CAACC,GAAG,CAAE,aAAYN,gBAAgB,CAACO,IAAK,UAAS,CAAC;IAC3D,CAAC,CAAC;IAEF,oBAAOT,OAAA,CAACE,gBAAgB;MAAA,GAAKI;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACxC,CAAC;EAACV,EAAA,CApBIE,WAAW;EAsBjB,OAAOA,WAAW;AACpB,CAAC;AAACS,EAAA,GAxBIb,MAAM;AA0BZ,eAAeA,MAAM;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}