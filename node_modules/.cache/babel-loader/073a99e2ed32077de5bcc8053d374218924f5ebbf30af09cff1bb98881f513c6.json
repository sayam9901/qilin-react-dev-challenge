{"ast":null,"code":"var _jsxFileName = \"C:\\\\next.js\\\\qilin-react-dev-challenge\\\\src\\\\component\\\\theme\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\n\n// creating a context for the theme\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // by deafult the theme is light \n  const [theme, setTheme] = useState('light');\n\n  //   this is a function that i will call from the onclcik of the toggle \n  //   button which will change the theme to light to dark and dark to light\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  return (\n    /*#__PURE__*/\n    // we are wraping all the children of this component in a theme provider and passing the theme\n    // and the toggle function as a prop to them\n    _jsxDEV(ThemeContext.Provider, {\n      value: {\n        theme,\n        toggleTheme\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(ThemeProvider, \"c/tiXTWXTQispzpG//dV5FX41vQ=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","theme","setTheme","toggleTheme","prevTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["C:/next.js/qilin-react-dev-challenge/src/component/theme/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\n// creating a context for the theme\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n\r\n    // by deafult the theme is light \r\n  const [theme, setTheme] = useState('light');\r\n\r\n//   this is a function that i will call from the onclcik of the toggle \r\n//   button which will change the theme to light to dark and dark to light\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    // we are wraping all the children of this component in a theme provider and passing the theme\r\n    // and the toggle function as a prop to them\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => useContext(ThemeContext);"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAE3C;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,OAAO,CAAC;;EAE7C;EACA;EACE,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAACE,SAAS,IAAKA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACnE,CAAC;EAED;IAAA;IACE;IACA;IACAR,OAAA,CAACC,YAAY,CAACQ,QAAQ;MAACC,KAAK,EAAE;QAAEL,KAAK;QAAEE;MAAY,CAAE;MAAAJ,QAAA,EAClDA;IAAQ;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY;EAAC;AAE5B,CAAC;AAACV,EAAA,CAlBWF,aAAa;AAAAa,EAAA,GAAbb,aAAa;AAoB1B,OAAO,MAAMc,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMnB,UAAU,CAACG,YAAY,CAAC;AAAA;AAACgB,GAAA,CAA1CD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}